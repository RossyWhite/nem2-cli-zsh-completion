#compdef nem2-cli

__nem2-cli_commands() {
  local -a _c
  _c=(
     'account:Fetch account information'
     'blockchain:Fetch blockchain information'
     'mosaic:Fetch mosaic information'
     'namespace:Fetch namespace information'
     'transaction:Send transactions'
     'monitor:Monitor blocks, transactions and errors'
     'profile:Profile management'
  )
  _describe -t commands Commands _c
}

__account_commands() {
  local -a _c
  _c=(
      'aggregatebonded:Fetch aggregate bonded transactions from account'
      'generate:Generate new accounts'
      'incoming:Fetch incoming transactions from account'
      'info:Fetch account info'
      'outgoing:Fetch outgoing transactions from account'
      'transactions:Fetch transactions from account'
      'unconfirmed:Fetch unconfirmed transactions from account'
    )
  _describe -t commands Commands _c
}

__blockchain_commands() {
  local -a _c
  _c=(
      'height:Blockchain height'
      'score:Blockchain score'
    )
  _describe -t commands Commands _c
}

__mosaic_commands() {
  local -a _c
  _c=(
      'info:Fetch Mosaic info'
    )
  _describe -t commands Commands _c
}

__namespace_commands() {
  local -a _c
  _c=(
      'info:Fetch Mosaic info'
    )
  _describe -t commands Commands _c
}

__transaction_commands() {
  local -a _c
  _c=(
      'cosign:Cosign an announce aggregate bonded transaction'
      'info:Fetch Transaction info'
      'mosaic:Mosaic creation transaction'
      'namespace:Register namespace transaction'
      'pullfunds:Create a pull transaction requesting xem to an account'
      'transfer:Send transfer transaction'

    )
  _describe -t commands Commands _c
}

__monitor_commands() {
  local -a _c
  _c=(
      'aggregatebonded:Monitor aggregate bonded transactions added'
      'block:Monitor new blocks'
      'confirmed:Monitor confirmed transactions added'
      'cosignature:Monitor cosignatures added'
      'status:Monitor transaction status error'
      'unconfirmed:Monitor unconfirmed transactions added'

    )
  _describe -t commands Commands _c
}

__profile_commands() {
  local -a _c
  _c=(
      'create:Create an account'
      'list:List accounts'
    )
  _describe -t commands Commands _c
}


_nem2-cli() {
  local context curcontext=$curcontext state line
  declare -A opt_args
  local -a default_opts
  local -a opts
  local ret=1

  default_opts=(
    '--help[show help]'
    '--profile[(optional) Select between your profiles, by providing a profile name]'
  )

  _arguments -C \
    '1: :__nem2-cli_commands' \
    '*:: :->args' \
    && ret=0

  case $state in
      (args)
        case $words[1] in
          (account)
            _arguments -C \
              '1: :__account_commands' \
              '*:: :->args' \
              && ret=0
            case $state in
              (args)
                case $words[1] in
                  (aggregatebonded)
                    _arguments -C \
                      '(-p --publickey)'{-p,--publickey}'[Account public key]' \
                      '(-n --numtransactions)'{-n,--numtransactions}'[(optional) Number of transactions]' \
                      '(-i --id)'{-i,--id}'[(optional) Identifier of the transaction after which we want the transactions to be returned]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (generate)
                    _arguments -C \
                     '(-s --save)'{-s,--save}'[(Optional) Save profile]' \
                     '(-u --url)'{-u,--url}'[(Optional) When saving profile, provide a NEM2 Node URL. Example: http://localhost:3000]' \
                     '(-n --network)'{-n,--network}'[Network Type: MAIN_NET, TEST_NET, MIJIN, MIJIN_TEST]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (incoming)
                    _arguments -C \
                      '(-p --publickey)'{-p,--publickey}'[Account public key]' \
                      '(-n --numtransactions)'{-n,--numtransactions}'[(optional) Number of transactions]' \
                      '(-i --id)'{-i,--id}'[(optional) Identifier of the transaction after which we want the transactions to be returned]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (info)
                    _arguments -C \
                     '(-a --address)'{-a,--address}'[Account address]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (outgoing)
                    _arguments -C \
                      '(-p --publickey)'{-p,--publickey}'[Account public key]' \
                      '(-n --numtransactions)'{-n,--numtransactions}'[(optional) Number of transactions]' \
                      '(-i --id)'{-i,--id}'[(optional) Identifier of the transaction after which we want the transactions to be returned]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (transactions)
                    _arguments -C \
                      '(-p --publickey)'{-p,--publickey}'[Account public key]' \
                      '(-n --numtransactions)'{-n,--numtransactions}'[(optional) Number of transactions]' \
                      '(-i --id)'{-i,--id}'[(optional) Identifier of the transaction after which we want the transactions to be returned]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (unconfirmed)
                    _arguments -C \
                      '(-p --publickey)'{-p,--publickey}'[Account public key]' \
                      '(-n --numtransactions)'{-n,--numtransactions}'[(optional) Number of transactions]' \
                      '(-i --id)'{-i,--id}'[(optional) Identifier of the transaction after which we want the transactions to be returned]' \
                      $default_opts \
                      && ret=0
                    ;;
                esac
                ;;
            esac
            ;;
          (blockchain)
            _arguments -C \
              '1: :__blockchain_commands' \
              '*:: :->args' \
              && ret=0
            case $state in
              (args)
                case $words[1] in
                  (height)
                    _arguments -C \
                      $default_opts \
                      && ret=0
                    ;;
                  (score)
                    _arguments -C \
                      $default_opts \
                      && ret=0
                    ;;
                esac
                ;;
            esac
            ;;
          (mosaic)
            _arguments -C \
              '1: :__mosaic_commands' \
              '*:: :->args' \
              && ret=0
            case $state in
              (args)
                case $words[1] in
                  (info)
                    _arguments -C \
                      '(-n --name)'{-n,--name}'[Mosaic Id in string format]' \
                      '(-u --uint)'{-u,--uint}'[Mosaic id in uint64 format. \[number, number\]]' \
                      $default_opts \
                      && ret=0
                    ;;
                esac
                ;;
            esac
            ;;
          (namespace)
            _arguments -C \
              '1: :__namespace_commands' \
              '*:: :->args' \
              && ret=0
            case $state in
              (args)
                case $words[1] in
                  (info)
                    _arguments -C \
                      '(-n --name)'{-n,--name}'[Namespace Id in string format]' \
                      '(-u --uint)'{-u,--uint}'[Namespace id in uint64 format. [number, number]]' \
                      $default_opts \
                      && ret=0
                    ;;
                esac
                ;;
            esac
            ;;
          (transaction)
            _arguments -C \
              '1: :__transaction_commands' \
              '*:: :->args' \
              && ret=0
            case $state in
              (args)
                case $words[1] in
                  (cosign)
                    _arguments -C \
                      '(-h --hash)'{-h,--hash}'[Aggregate bonded transaction hash to be signed]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (info)
                    _arguments -C \
                      '(-h --hash)'{-h,--hash}'[Transaction hash]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (mosaic)
                    _arguments -C \
                      '(-m --mosaicname)'{-m,--mosaicname}'[Mosaic name]' \
                      '(-n --namespacename)'{-n,--namespacename}'[Parent namespace name]' \
                      '(-a --amount)'{-a,--amount}'[Amount of tokens]' \
                      '(-t --transferable)'{-t,--transferable}'[Mosaic transferable]' \
                      '(-s --supplymutable)'{-s,--supplymutable}'[Mosaic supply mutable]' \
                      '(-l --levymutable)'{-l,--levymutable}'[Mosaic levy mutable]' \
                      '(-d --divisibility)'{-d,--divisibility}'[Mosaic divisibility, from 0 to 6]' \
                      '(-u --duration)'{-u,--duration}'[Mosaic duration in amount of blocks]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (namespace)
                    _arguments -C \
                      '(-n --name)'{-n,--name}'[Namespace name]' \
                      '(-r --rootnamespace)'{-r,--rootnamespace}'[Root namespace]' \
                      '(-s --subnamespace)'{-s,--subnamespace}'[Sub namespace]' \
                      '(-d --duration)'{-d,--duration}'[Duration (use it with --rootnamespace)]' \
                      '(-p --parentname)'{-p,--parentname}'[Parent namespace name (use it with --subnamespace)]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (pullfunds)
                    _arguments -C \
                      '(-r --recipient)'{-r,--recipient}'[Funds holder address]' \
                      '(-m --message)'{-m,--message}'[Message to the funds holder]' \
                      '(-x --mosaic)'{-x,--mosaic}'[Mosaic you want to get in the format namespaceName:mosaicName::absoluteAmount]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (transfer)
                    _arguments -C \
                      '(-r --recipient)'{-r,--recipient}'[Recipient]' \
                      '(-m --message)'{-m,--message}'[Transaction message]' \
                      '(-c --mosaic)'{-c,--mosaic}'[Mosaic you want to get in the format namespaceName:mosaicName::absoluteAmount, add multiple mosaics splitting them with a comma]' \
                      $default_opts \
                      && ret=0
                    ;;
                esac
                ;;
            esac
            ;;
          (monitor)
            _arguments -C \
              '1: :__monitor_commands' \
              '*:: :->args' \
              && ret=0
            case $state in
              (args)
                case $words[1] in
                  (aggregatebonded)
                    _arguments -C \
                      '(-a --address)'{-a,--address}'[Address]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (block)
                    _arguments -C \
                      $default_opts \
                      && ret=0
                    ;;
                  (confirmed)
                    _arguments -C \
                      '(-a --address)'{-a,--address}'[Address]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (cosignature)
                    _arguments -C \
                      '(-a --address)'{-a,--address}'[Address]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (status)
                    _arguments -C \
                      '(-a --address)'{-a,--address}'[Address]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (unconfirmed)
                    _arguments -C \
                      '(-a --address)'{-a,--address}'[Address]' \
                      $default_opts \
                      && ret=0
                    ;;
                esac
                ;;
            esac
            ;;
          (profile)
            _arguments -C \
              '1: :__profile_commands' \
              '*:: :->args' \
              && ret=0
            case $state in
              (args)
                case $words[1] in
                  (create)
                    _arguments -C \
                      '(-p --privatekey)'{-p,--privatekey}'[Private key]' \
                      '(-n --network)'{-n,--network}'[Network Type: MAIN_NET, TEST_NET, MIJIN, MIJIN_TEST]' \
                      '(-u --url)'{-u,--url}'[NEM2 Node URL. Example: http://localhost:3000]' \
                      $default_opts \
                      && ret=0
                    ;;
                  (list)
                    _arguments -C \
                      '(-a --address)'{-a,--address}'[Account address]' \
                      && ret=0
                    ;;
                esac
                ;;
            esac
            ;;
      esac
      ;;
  esac

  return ret
}


_nem2-cli "$@"
